Media Access Control - Управление доступом к среде
[ - Permanent - постоянный
[ - Physical - физический
[ - Unique - уникальный
MAC Source <-> MAc Destination [MAC Источника <-> mac адрес назначения]

---В Ручную---
1) ifconfig [MAC address можно увидеть у желаемого интерфейса после ether [08:00:27://://://]]
2) ifconfig [interface] down
(ifconfig wlan0 down)
- Отключаем интерфейс
3) ifconfig [interface] hw ether [new mac address]
(ifconfig wlan0 hw ether //://://://://://)
- Меняем мак адрес
4) ifconfig [interface] up
- Поднимаем\Вкючаем соединение с интерфейсом

0) Primary

import subprocess

# First
subprocess.call('ifconfig', shell=True)
# вызываем команду через командную строчку разрашая использовать терминал - shell=True

# Second
subprocess.call(['ls', '-1'])

1) поменять мак через скрипт
import subprocess

subprocess.call('ifconfig wlan0 down', shell=True)
subprocess.call('ifconfig wlan0 hw ether 00:11:22:33:44:69', shell=True)
subprocess.call('ifconfig wlan0 up', shell=True)

2) Ввод переменных и строк в скрипт

interface = input('Interface -> ')
new_mac = input('new MAC -> ')

print('[+] Changing MAC address for ' + interface + ' to ' + new_mac)

subprocess.call('ifconfig ' + interface + ' down', shell=True)
subprocess.call('ifconfig ' + interface + ' hw ether ' + new_mac, shell=True)
subprocess.call('ifconfig ' + interface + ' up', shell=True)

3) Обрабатываем то, что вводит пользователь + обезопасим от взлома через скрипт, ведь если ввести wlan0;ls;
- а после нужынй мак адрес, то выполнится команда ls, потомучто (;)- эти ковычки говорят линукс, что после
- будет введене еще одна команда

interface = input('Interface -> ')
new_mac = input('new MAC -> ')

print('[+] Changing MAC address for ' + interface + ' to ' + new_mac)


subprocess.call(['ifconfig', interface, 'down'])
subprocess.call(['ifconfig', interface, 'hw', 'ether', new_mac])
subprocess.call(['ifconfig', interface, 'up'])

4) допишем опции библиотекой optparse

import optparse

parser = optparse.OptionParser()

parser.add_option('-i', '--interface', dest='interface', help='Interface to change its MAC address')
parser.add_option('-m', '--mac', dest='new_mac', help='New MAC address')

parser.parse_args()

5) Допишем аргументы к опциям optparse

parser = optparse.OptionParser()

parser.add_option('-i', '--interface', dest='interface', help='Interface to change its MAC address')
parser.add_option('-m', '--mac', dest='new_mac', help='New MAC address')

(options, arguments) = parser.parse_args()

interface = options.interface
new_mac = options.new_mac

6) Рефакторинг, добавляем функции

def change_mac(interface, new_mac):
    print('[+] Changing MAC address for ' + interface + ' to ' + new_mac)

    subprocess.call(['ifconfig', interface, 'down'])
    subprocess.call(['ifconfig', interface, 'hw', 'ether', new_mac])
    subprocess.call(['ifconfig', interface, 'up'])


parser = optparse.OptionParser()

parser.add_option('-i', '--interface', dest='interface', help='Interface to change its MAC address')
parser.add_option('-m', '--mac', dest='new_mac', help='New MAC address')

(options, arguments) = parser.parse_args()

change_mac(options.interface, options.new_mac)


7) Возвращение значения из функции | Refactoring v2

def get_args():
    parser = optparse.OptionParser()
    parser.add_option('-i', '--interface', dest='interface', help='Interface to change its MAC address')
    parser.add_option('-m', '--mac', dest='new_mac', help='New MAC address')
    return parser.parse_args()


def change_mac(interface, new_mac):
    print('[+] Changing MAC address for ' + interface + ' to ' + new_mac)
    subprocess.call(['ifconfig', interface, 'down'])
    subprocess.call(['ifconfig', interface, 'hw', 'ether', new_mac])
    subprocess.call(['ifconfig', interface, 'up'])


(options, arguments) = get_args()
change_mac(options.interface, options.new_mac)


8) Принятие решений (Описание ошибок)

def get_args():
    parser = optparse.OptionParser()
    parser.add_option('-i', '--interface', dest='interface', help='Interface to change its MAC address')
    parser.add_option('-m', '--mac', dest='new_mac', help='New MAC address')
    (options, arguments) = parser.parse_args()
    if not options.interface:
        parser.error('[-] Please specify an interface, use --help for more info')
    elif not options.new_mac:
        parser.error('[-] Please specify a new mac, use --help for more info')
    return options


def change_mac(interface, new_mac):
    print('[+] Changing MAC address for ' + interface + ' to ' + new_mac)
    subprocess.call(['ifconfig', interface, 'down'])
    subprocess.call(['ifconfig', interface, 'hw', 'ether', new_mac])
    subprocess.call(['ifconfig', interface, 'up'])


options = get_args()
change_mac(options.interface, options.new_mac)


9) Сопоставление смены мак адреса (до и после)
- !Check if MAC address was changed!
- [with subprocess.check_output()]

[9.1] Вывод информации об interface before finish of the script

ifconfig_result = subprocess.check_output(['ifconfig', options.interface])
print(ifconfig_result)


[9.2] Parsing MAC address in info obout interface
[Regular expressions] Pythex.org -> Для подбора регулярного выражения

import re

mac_address_search_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", ifconfig_result).decode(sys.stdout.encoding)
print(mac_address_search_result.group(0)) #.group(0) - обычно выводит все попадающие под выражения результаты
- Для того, чтобы не было поиска и повторения, пишем [group(0)] и поиск остановится на первом результатем
- [.decode(sys.stdout.encoding)] - Декодирует из битной системы в строку, иначе выдает ошибку


[9.3] Refactoring v3 RE + finally check mac address

def get_current_mac(interface):
    ifconfig_result = subprocess.check_output(['ifconfig', interface]).decode(sys.stdout.encoding)
    mac_address_search_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", ifconfig_result)

    if mac_address_search_result:
        return mac_address_search_result.group(0)
    else:
        print('[-] Could not read MAC address.')


options = get_args()

current_mac = get_current_mac(options.interface)
print('Current MAC = ' + str(current_mac))

change_mac(options.interface, options.new_mac)

current_mac = get_current_mac(options.interface)
if current_mac == options.new_mac:
    print('[+] MAC address was successfully changed to ' + current_mac)
else:
    print('[-] MAC address did not get changed.')
